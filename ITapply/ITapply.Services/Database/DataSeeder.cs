using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using ITapply.Models.Responses;
using Microsoft.EntityFrameworkCore;
using static ITapply.Models.Responses.EnumResponse;

namespace ITapply.Services.Database
{
    public static class DataSeeder
    {
        private const string PdfBase64 = "";
        private const string PngBase64 = "iVBORw0KGgoAAAANSUhEUgAAAjMAAAIFCAMAAAAQr4xAAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA8UExURf///3DN5Kzf6nqjzAB4rgBJYgG85GWUxQBpkwCT0fH2+d7p863G38XZ6Za21kHG5AGl2gCGwUR5i3DfzC5rUXgAABDiSURBVHja7J2Jdqu4FgUTkxsnIGE7//+x7TkgNBwNuCNRdfut9bpvjA2U9zmSgLy9AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvJBBq7H7OfPvxuX/dqMaeg4N2HQZ909XTM7mIA5M6fXo1GUizh5v4BYwah/25enNqNFm8wkTIcxDm4HjtuGIGWOFubEnbDYbMV//UvkZsWaDxvz8y4IShTFkDfjQ+39F+FFYs5HOt5uc9q9/X7/8i25wfjTHcwNlSd3L0peTKGs6oqb5kNn7fYk3h6hpnEvIfIkhauDSyXzFQdRsfLj085WCaADF0W1TmY+vRKhPW1Xm++PBGtb8MC3cnjKH79PHlNLaIE17yhy/DWk+SktDJ9wS/fD+eXbm+8OkqDVI09Qg+/3weVbGDJri1iBNO4Vp9/55dcYmTaQ2SLONlNmdY+b4/QppKE8NKfNwxi5NnDaMnjagzNSZ7w+kgcCQaXd25nPijEuaUtb8MCPcgjKHmTOnjwLW+JYROOrVD5muMTNxZnVpRg573c3MPWamznikKWINg6fqlVk6s7o0tDQ1NzOP0iR2JsYaWpr2lJnEzNwZ9+CpkDRcg1VvZXI6s3LSMEtTdWW6lab7epNQmo9saahONceMw5m1pWHsVHHMHFzOrCsNY6cKldEBZ/x9cL40tMHVVqanM8fvuOokt4agaYRHzDzaGYszIWkyg4YlhFpj5umMpTitmzQETWXsRM6UkoagaSRm5u2MtTiF+uA8aQiaOruZkDOnNaVh6FRlzEycsRanUtIQNBtyZlVpmAyuZz7vV5mpM8eXS8OqU40xI3Am2AenS8PydlUDbYszjuJUShq64Npj5uHMRBln0KwnzQ9no77SNMsZpzOntaShOFXUAVudcRanQtJQnBp05vhyafacj+raGakz4Zbmg+LULtrtzP8gDdN61ZUmuTPf6zjDtF51pclw5tPjzKlE0jDabs+ZY5Y0Kc7Q0NTWzswn9fzOrCMNDU0l7YwzZ/zSFKhOXK1XvzPvMc6sIQ0zNJW0MxNnDi+WhguvtubMqbg0NMGVtMAeZ7KliQ0anGndmXxpGDjV3gIvmuCgNB+FpWHg9NfZLaSJdSZbGpypMmemzhzKSxPlDCtOtQ2bUpw5FZWGCZoWcmZtaVilrDFn/E2wd3m7gDRM6lXvTELQfBcMGpxpw5lg0HyXCxqcqdAZW3E6ZkuDM1tzJixNzm3cOFO9M4ekoCklDc7U6Exa0ORIgzMVzs+Ei1O4Dc542h7OVO/MIU2aU7I0zOlV74w9aI7rBQ1rB/U7c3h1dWKNsiJinFlPGq6FqAkdUZwE1Sn1+fY8TqR+Zw4rSSNwhms7a5mgMZxxBI2kOp0yixPXkNfqTHrQJP2eJ6Znahw4CYMmW5qgM5yTap05fL6ypWGo3UAT7AwaQUuT8JuVGTa10NDkBE28NAybqnRGHDS50nidoQWuuaFxBk12S+NzhtWmqhsaZ9DkDp58zrByUHdxcgbNZ/HqxIxeI864gyZTGrcztDOVNTSFq9MpwRlmZ6oPmsOrpGGk3YwznuqU1Qe7nKE0NVCcDq+RhtLUUtCsJI0jZxg11edMVHXKmdujNDUzrWdx5iXSsD7ZVtAcVpHG5gwxU2cXHClNcktjc4YOuJmg8VUnSdKEpeEJ5M0FzSrSEDNtB02mNCeZM8RMU0FzKC/NwhliprGgWVUaupkmg2YFaYiZloImXprPBGnmzhAzNQaNXlUajzNMATcbNAFp4h87PYsZpoCRJpw005z54Vqr+tvgFGk+06ThboNWgiZJmrhfQziJGSpTu9XJPyMcKQ2Vqbmxk8OarPpkd4bK1HZLk1mfFs5cbrelMjXe0gSl+ZRKc3eGZmYL0uREzWnuDBPAzbU0K0TNyXCG/rcBtCRpglFzDEtzVYb+dztJE4yasDQXZ1CmwcGTO2nSrTk9lenof5uUJrk+ua25O4MyG5RGYM3RKc3XF8pssKdJt+biDMo0LU2WNVZtPr5of9ue3PNK834Ia7Pw5siFeQ0mjSFNtjUXb568M/u7haTxSiPV5sZhRyuzkaYmYI1Qm8OBkNlS1ISsCWpzFuadkNnUTI3Amos3B4cvZ2HedwPKbK0VFkhzF+fizvXPldt/3hEym+xqpNos2e3oZLba1aRZs6MsbbpARWtzfoHGGKzZRQiz05QlrJF5s7sKQ8Zs1hq9i/HmrsslYjCGsDF5yPR+/zNlwJjNW+PQxiETwsB17O0sUjsSBjxxo/35gi9g8eYszqANdfTZlqHHF/Cqc5bnCYcDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgRfSyfxK3Vd1+xn/sftBnhtgXVffIrcsTCpVSoxjlPCb95Zj5tnX+u/MhdR6i6wcp/BTw/rrN3488ROzp40Nr2VNgB9XtL3QqYheGsTuTttf6ti/31/bXf007gMNtU2qQHdHxtqMRdINVvfOWZJvqzrtpOQl9yiEP7p+xzSF6b2+v78bguZhsWv6rlZ8vGuN/xYKav93vv0ZvSj8/upZ+MWJRFmFitzQuToH6/btS0vSLbap9Ot3o02ZqY6elH3CMf83ztb9vOMzfvxtSldl3oQPaJR680fwyj0mnYJ4n02NeSpqpIbfjOO6z8Fgz23In3IFh9lWM2+vJay+66VAlkCiz38t/MvJsz0928nmY7Zr2JlkSlk1mOuOOAx2IYsmr4r4qhjOzqhshTT/7DJ0stTOdyXBvdgLUvrQ0895lLOOMIw4WfZKODsLYTsRwZr4tuTRK+rGzlJnVJl3qW6tEX+dkZco5Y40DJRooBF8WU1RMZ/oxZUtiZbJawdmWdW7UD46P1OX+qrZ+3K/kjEUaLTNLoJpOdsaURpdVRttGk1JG7Ylk/6Z8Y7Ccr5wkSRfOyPfY96UxhzBx1UlZRgbJzsRL08uVMbY9qstvFhHj2efApi6zh+Z00FMNlfRFlZ8N05lOusvD8mObwyIlnsYS5L3qU52JlWaujP/HZ8MyNZRqGUbRDKQ5l6Ochy9HGr0POhO1deNTD+7jGfX5lbRfkjkTExyRho2JnbpfvohKPFqOkBLMHab2vzZnoo2cblO5jr1y/lREXyk7KTZnYqIjLpS6Uk3DmNh+TPfs8UKV2BIEpkgL5YzxDVGOE3/eqI75GqmI1RmRM2bSqELKvO0TFkZCb6uTT6rHmcQRdz/u13BmEiHKkT96/ubB91CRM4dhZ6QTXbEj82LOdMlJrxY7nNxHCief1nJmVpkWiyDiw9AZKzkq2RmRNEPsZE6p6da+S5ZPy5xJ6oP1XuJM/JZ7qzNqEStaXl0nzgxGDxYcPjmdMQ6AbUPRyqyRM7HyDUJnEk6tYzFjpZyZLifr6DZv6oxZUkN77namD0kTr8xfcMaXM/OYVuln9rx/3crOLCrTojr1YmfMoho4l4MnzebfG1OaeaLJ6v8KtalozgwqffA0H8cPazujrA2vljo/d2YhjU51xpBm7D2zarKWcY0euGTODG/J0szyvRv6bt1+xnWhk7Q6KfPH5ufaK43XGY80Scr8+X5mME992pLB+Yj36+aMtTKZcwm+N1o4Y3Zjnk7Y74xTmqFLahf/QG0K5IxxBVGfsNnbZMm6zmjnwRdWp6Uz5iVsbmkCzjjk0GnKVJAzZivbR5/V20da1xnfJbhKVFwtziyGT0OiM1ZpUpWpoJ8xI0O21rv0rGg/Y64dOCuT+VncxdXmjHT4FHTG0rkkK/P3x03LCRvJ9i1NUMmcWayUaO/R15KTY3XGnF9xdMJhZxbSpCvz5+dnBosCkRcQ3X++oDOLddXQzSGS6qQcm5AMnwTOmDMxSdfp1NPPmN1gePBkG58Xc6ZfXr8xBlKwF1QnlzNvgoUEiTOem0Ii74z54+tNv0OImNsvrPe6FOln+ss9oot1Px0MeUF1cjpjnmzL60XOOKWJvVm1kpwxPPCfZPs4y+PMXskYx8XdyZeIkty2qIINmduZ8PBJ5oxDmuj7m+voZ6Kk6e2R5HMm774LJThjs0tpdKQzweGT0Bnr1UTx9aWOcdPyuAkvOpsOW9dwRosqk9nKWvsnnzPPBxQ4rJM6Y5Em4bRXMT9j218d0/+u5Yyeb1e4nmQ/Ucq/GWMhQac5s5Am5erHavqZRR8suVlava3pzPUj9CqlLuhoZ7zDJ7kzRlwnXTBbwXqTS5ohVALmpaK0M/dnWcyuEx8GPTj/p/wfPuSM7zqsCGcyrtyuMWeMELF1BZ71zLLOPO4Fm828ZN2zG3TG0wnHOOM+ug32M4ujtjzuvusmyjnTjer5bC6V0wpFOuO+Duv/ckZVkDNGPitveus3sTOd5M/1BvXLHcW9szONEW+Id8a5kFB9zqzXz4Sk8Y7GfWsHgwjzDnXH3VOJ1UnkjOM6rM05E5Mz3sGT/5KJotfP5FYmr/DeIbv1Oqzqa9O4Zs4Y37Tp3wcuzVrBmaHLccZ5+5p/Oc22+kTOBPbK8eCv0EC8vDN97mi9T3HGNnyinwkdPuvgKXiJTdHr9PIr0+KQi52xPDsu0Zmuydpk/SYYfXAvW40qnjPTa4K1HNd0cMypNIdP9c/PFLzHXzKNrpZDpv4FzkzMVYmqzXYv6utvPlTypc6Uev5MkWeJWJ4/MwgOmfYtGazmjEp9ueP6q7iS4bzo7gXOjPvcqr7cUNwziyzPaAkfvvkiwiC5iq9wP/P7lrFftllpValtxn/t3clO6zAUANBKWSDZcf7/c3nQvkKm1r42WZ0jgcSCNMP1nPqedcAviJk58N3Lt09xqs/nsX63tv6q1oOnmgXvsfVMtGU6b51au6Yn+zpfEDNls/AWrmvSZg/GmiOlskxH11uz9LJ8NFbOY2Om9FRS5WjA3T6cKdP7mcK/GDdtV+q+tmgtOddOpp+PPKf7Zq+nysFer6mhJJy+EH27ImbiLdNp6xR4lEdBc0E907oV9Pme0sclv35H6V+XW3X7jidhz0v9yP5MT8u0O/cSL/556oqZaD2T+racz8Nm0g+7gx+5rZS9uAsj65nSO3A4yJYTepT72vaKmOkMmnnY8svcPOycW0JmZMz0tUy7LsE97mKPctcTvqJtunWm0Bm0ALPK+lV7VXNLIRsXM7+eUzjlS9qlkgsW/23QXFLPfJWb+MrJum5O0fBbD/Nrr2obo/MtFjNLNCtbx5TWbkfP8KNc3/N8TT2z/QpyeJntFkwuuM2OUGpvX8tGTePqmTJk6nweFTPr+Z7UEK1TZ97GYBLT+aB/1HakZT8pVF+QWzJXbluUOTr2eUZfVzKybaeoo/bKTcO4PGiJ8f8M29TVNP1UW/NSkXf5PoWTXrTR77cNed6u92mVf3IRp3XLFk2R0Zn08NmmLK0XfXDDpvpL+fmgfBsg5Xsm9Vov1gjS62N95bg/nypOj3+syg/xnUK85JpCsT7px9+Bue9/lfLUn/v7ETTPN4Aep5djzcQyTXUZkHb3Yaj05qfpQL9+/cV5XizlAR/6HXqjHt3uBXcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAsE8t/ib5Gh87OAAAAABJRU5ErkJggg==";

        public static void SeedData(ITapplyDbContext dbContext)
        {
            dbContext.Database.EnsureCreated();

            if (dbContext.Roles.Any())
            {
                return;
            }

            SeedRoles(dbContext);
            SeedSkills(dbContext);
            SeedLocations(dbContext);
            SeedUsersAndProfiles(dbContext);
            SeedJobPostings(dbContext);
            SeedJunctionTables(dbContext);
            SeedApplications(dbContext);
            SeedRemainingData(dbContext);
        }

        private static void SeedRoles(ITapplyDbContext dbContext)
        {
            dbContext.Roles.AddRange(
                new Role { Name = "Administrator" },
                new Role { Name = "Candidate" },
                new Role { Name = "Employer" }
            );
            dbContext.SaveChanges();
        }

        private static void SeedSkills(ITapplyDbContext dbContext)
        {
            var skills = new[]
            {
                "C#", "Java", "Python", "Go", ".NET Core", "ASP.NET", "Node.js", "JavaScript", "TypeScript",
                "React", "Angular", "Vue.js", "HTML", "CSS", "SQL", "NoSQL", "MongoDB", "PostgreSQL", "MySQL",
                "Redis", "GraphQL", "Docker", "Kubernetes", "Terraform", "Ansible", "Jenkins", "GitLab CI",
                "GitHub Actions", "AWS", "Azure", "Google Cloud Platform (GCP)", "DevOps", "CI/CD", "Git",
                "Agile", "Scrum", "Project Management", "UI/UX Design", "Figma", "Sketch", "Mobile Development",
                "iOS", "Android", "Swift", "Kotlin", "Flutter", "React Native", "Machine Learning", "Deep Learning",
                "Data Science", "Big Data", "Apache Spark", "Hadoop", "Pandas", "Quality Assurance", "Cybersecurity"
            };

            dbContext.Skills.AddRange(skills.Select(s => new Skill { Name = s }));
            dbContext.SaveChanges();
        }

        private static void SeedLocations(ITapplyDbContext dbContext)
        {
            dbContext.Locations.AddRange(
                new Location { City = "Sarajevo", Country = "Bosnia and Herzegovina" },
                new Location { City = "Mostar", Country = "Bosnia and Herzegovina" },
                new Location { City = "Banja Luka", Country = "Bosnia and Herzegovina" },
                new Location { City = "Tuzla", Country = "Bosnia and Herzegovina" },
                new Location { City = "Belgrade", Country = "Serbia" },
                new Location { City = "Zagreb", Country = "Croatia" },
                new Location { City = "New York", Country = "USA" },
                new Location { City = "San Francisco", Country = "USA" },
                new Location { City = "London", Country = "UK" },
                new Location { City = "Berlin", Country = "Germany" },
                new Location { City = "Amsterdam", Country = "Netherlands" },
                new Location { City = "Remote", Country = "Global" }
            );
            dbContext.SaveChanges();
        }

        private static void SeedUsersAndProfiles(ITapplyDbContext dbContext)
        {
            var adminRole = dbContext.Roles.Find(1)!;
            var candidateRole = dbContext.Roles.Find(2)!;
            var employerRole = dbContext.Roles.Find(3)!;
            var locations = dbContext.Locations.ToList();
            var logoBytes = Convert.FromBase64String(PngBase64);
            var cvBytes = Convert.FromBase64String(PdfBase64);

            var adminUser = CreateUser("admin@itapply.com", "test");
            dbContext.Users.Add(adminUser);
            dbContext.UserRoles.Add(new UserRole { User = adminUser, Role = adminRole });

            var candidates = new List<Candidate>
            {
                new Candidate { User = CreateUser("candidate1@itapply.com", "test"), FirstName = "Tarik", LastName = "Kukuljac", Title = ".NET Developer", PhoneNumber = "+38761111111", ExperienceLevel = ExperienceLevel.Senior, ExperienceYears = 8, Location = locations[0], Bio = "Senior .NET developer with a passion for clean architecture and microservices." },
                new Candidate { User = CreateUser("candidate2@itapply.com", "test"), FirstName = "Ben", LastName = "Carter", Title = "Frontend Engineer", PhoneNumber = "+442071234567", ExperienceLevel = ExperienceLevel.Senior, ExperienceYears = 7, Location = locations[8], Bio = "Creative frontend developer specializing in React, TypeScript, and modern UI/UX principles." },
                new Candidate { User = CreateUser("candidate3@itapply.com", "test"), FirstName = "Chloe", LastName = "Davis", Title = "DevOps Engineer", PhoneNumber = "+12125550103", ExperienceLevel = ExperienceLevel.Mid, ExperienceYears = 5, Location = locations[6], Bio = "DevOps enthusiast focused on automation, CI/CD, and cloud infrastructure on AWS and Azure." },
                new Candidate { User = CreateUser("candidate4@itapply.com", "test"), FirstName = "Arman", LastName = "Basovic", Title = "Data Scientist", PhoneNumber = "+38164111222", ExperienceLevel = ExperienceLevel.Mid, ExperienceYears = 4, Location = locations[4], Bio = "Data scientist skilled in Python, machine learning, and telling stories with data." },
                new Candidate { User = CreateUser("candidate5@itapply.com", "test"), FirstName = "Velid", LastName = "Madzak", Title = "Full-Stack Developer", PhoneNumber = "+38765222333", ExperienceLevel = ExperienceLevel.Mid, ExperienceYears = 6, Location = locations[1], Bio = "Versatile full-stack developer comfortable with both .NET backends and React frontends." },
                new Candidate { User = CreateUser("candidate6@itapply.com", "test"), FirstName = "Bakir", LastName = "Kustura", Title = "Junior Software Developer", PhoneNumber = "+38762333444", ExperienceLevel = ExperienceLevel.Junior, ExperienceYears = 1, Location = locations[2], Bio = "Eager junior developer with a solid foundation in Java and SQL, looking to grow." },
                new Candidate { User = CreateUser("candidate7@itapply.com", "test"), FirstName = "Grace", LastName = "Lee", Title = "iOS Developer", PhoneNumber = "+14155550107", ExperienceLevel = ExperienceLevel.Mid, ExperienceYears = 4, Location = locations[7], Bio = "Dedicated iOS developer with experience building high-quality mobile applications using Swift and SwiftUI." },
                new Candidate { User = CreateUser("candidate8@itapply.com", "test"), FirstName = "Hajrudin", LastName = "Imamovic", Title = "QA Engineer", PhoneNumber = "+38761444555", ExperienceLevel = ExperienceLevel.Mid, ExperienceYears = 5, Location = locations[0], Bio = "Detail-oriented QA Engineer with a strong background in both manual and automated testing." },
                new Candidate { User = CreateUser("candidate9@itapply.com", "test"), FirstName = "Benjamin", LastName = "Bazdar", Title = "Python Developer", PhoneNumber = "+38591555666", ExperienceLevel = ExperienceLevel.Mid, ExperienceYears = 3, Location = locations[5], Bio = "Python developer specializing in web applications with Django and Flask." },
                new Candidate { User = CreateUser("candidate10@itapply.com", "test"), FirstName = "Amar", LastName = "Kukuljac", Title = "Junior UI/UX Designer", PhoneNumber = "+38765555666", ExperienceLevel = ExperienceLevel.Junior, ExperienceYears = 1, Location = locations[1], Bio = "Creative junior designer with skills in Figma and a passion for user-centered design." }
            };

            dbContext.Candidates.AddRange(candidates);
            foreach (var candidate in candidates) { dbContext.UserRoles.Add(new UserRole { User = candidate.User, Role = candidateRole }); }
            dbContext.SaveChanges();

            var savedCandidates = dbContext.Candidates.ToList();
            foreach (var candidate in savedCandidates) { dbContext.CVDocuments.Add(new CVDocument { CandidateId = candidate.Id, FileName = $"{candidate.FirstName}_{candidate.LastName}_CV.pdf", FileContent = cvBytes, UploadDate = DateTime.Now, IsMain = true }); }

            var employers = new List<Employer>
            {
                new Employer { User = CreateUser("employer1@itapply.com", "test"), CompanyName = "Innovatech Solutions", Address = "123 Tech Park, Sarajevo", Benefits = "Health, Dental, Vision, 401k", ContactEmail = "hr@innovatech.com", ContactPhone = "+38733123456", Industry = "Enterprise Software", YearsInBusiness=15, Size="500-1000", Location=locations[0], Website="https://innovatech.example.com", VerificationStatus=VerificationStatus.Approved, Logo=logoBytes, Description="Leading innovator in enterprise resource planning software." },
                new Employer { User = CreateUser("employer2@itapply.com", "test"), CompanyName = "CloudNet Dynamics", Address = "456 Cloud Ave, New York", Benefits = "Remote-first, Unlimited PTO, Stock Options", ContactEmail = "jobs@cloudnet.com", ContactPhone = "+12125550102", Industry = "Cloud Computing", YearsInBusiness=8, Size="100-250", Location=locations[6], Website="https://cloudnet.example.com", VerificationStatus=VerificationStatus.Approved, Logo=logoBytes, Description="Providing scalable cloud solutions and DevOps consultancy." },
                new Employer { User = CreateUser("employer3@itapply.com", "test"), CompanyName = "PixelPerfect Inc.", Address = "789 Design Blvd, San Francisco", Benefits = "Creative stipend, Flexible hours", ContactEmail = "talent@pixelperfect.com", ContactPhone = "+14155550103", Industry = "Web & Mobile Apps", YearsInBusiness=6, Size="50-100", Location=locations[7], Website="https://pixelperfect.example.com", VerificationStatus=VerificationStatus.Approved, Logo=logoBytes, Description="Crafting beautiful and intuitive user experiences for web and mobile." },
                new Employer { User = CreateUser("employer4@itapply.com", "test"), CompanyName = "Data Insights Corp.", Address = "101 Analytics Way, London", Benefits = "Conference budget, Catered lunches", ContactEmail = "careers@datainsights.com", ContactPhone = "+442079460104", Industry = "Data Analytics", YearsInBusiness=10, Size="250-500", Location=locations[8], Website="https://datainsights.example.com", VerificationStatus=VerificationStatus.Approved, Logo=logoBytes, Description="Unlocking the power of data through machine learning and analytics." },
                new Employer { User = CreateUser("employer5@itapply.com", "test"), CompanyName = "NextGen Systems", Address = "210 Future Road, Berlin", Benefits = "Pension plan, Company car", ContactEmail = "contact@nextgen-systems.com", ContactPhone = "+493012345678", Industry = "Information Technology", YearsInBusiness=20, Size="1000+", Location=locations[9], Website="https://nextgen.example.com", VerificationStatus=VerificationStatus.Approved, Logo=logoBytes, Description="A global leader in IT services and consulting." },
                new Employer { User = CreateUser("employer6@itapply.com", "test"), CompanyName = "SoftComp", Address = "333 Ulica, Belgrade", Benefits = "Private health insurance, Gym membership", ContactEmail = "apply@softcomp.com", ContactPhone = "+381112345678", Industry = "Software Development", YearsInBusiness=12, Size="100-250", Location=locations[4], Website="https://softcomp.example.com", VerificationStatus=VerificationStatus.Approved, Logo=logoBytes, Description="Custom software development house based in Belgrade." },
                new Employer { User = CreateUser("employer7@itapply.com", "test"), CompanyName = "CodeWeavers", Address = "444 Ulica, Zagreb", Benefits = "Indie game launch bonuses", ContactEmail = "info@codeweavers.com", ContactPhone = "+38514812345", Industry = "Game Development", YearsInBusiness=5, Size="20-50", Location=locations[5], Website="https://codeweavers.example.com", VerificationStatus=VerificationStatus.Pending, Logo=logoBytes, Description="Small, passionate studio creating indie games." },
                new Employer { User = CreateUser("employer8@itapply.com", "test"), CompanyName = "OldTech Co.", Address = "555 Legacy Lane, Tuzla", Benefits = "Stable job, Standard benefits", ContactEmail = "hr@oldtech.com", ContactPhone = "+38735123456", Industry = "Legacy Systems", YearsInBusiness=30, Size="500-1000", Location=locations[3], Website="https://oldtech.example.com", VerificationStatus=VerificationStatus.Rejected, Logo=logoBytes, Description="Maintaining legacy enterprise systems." }
            };

            dbContext.Employers.AddRange(employers);
            foreach (var employer in employers) { dbContext.UserRoles.Add(new UserRole { User = employer.User, Role = employerRole }); }

            dbContext.SaveChanges();
        }

        private static void SeedJobPostings(ITapplyDbContext dbContext)
        {
            var employers = dbContext.Employers.Where(e => e.VerificationStatus == VerificationStatus.Approved).ToList();
            var locations = dbContext.Locations.ToList();
            var jobPostings = new List<JobPosting>
            {
                new JobPosting { Title = "Senior .NET Engineer", Employer = employers[0], Location = locations[0], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Senior, MinSalary=100000, MaxSalary=140000, Remote=Remote.Hybrid, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-10), ApplicationDeadline = DateTime.Now.AddDays(30) },
                new JobPosting { Title = "Backend Developer (C#)", Employer = employers[4], Location = locations[9], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=80000, MaxSalary=110000, Remote=Remote.No, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-5), ApplicationDeadline = DateTime.Now.AddDays(20) },
                new JobPosting { Title = "Azure Cloud Engineer (.NET)", Employer = employers[1], Location = locations[6], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Senior, MinSalary=110000, MaxSalary=150000, Remote=Remote.Yes, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-15), ApplicationDeadline = DateTime.Now.AddDays(45) },
                new JobPosting { Title = "Junior Java Developer", Employer = employers[5], Location = locations[4], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Junior, MinSalary=50000, MaxSalary=70000, Remote=Remote.Hybrid, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-8), ApplicationDeadline = DateTime.Now.AddDays(25) },
                new JobPosting { Title = "Lead Software Engineer (.NET)", Employer = employers[0], Location = locations[0], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Lead, MinSalary=130000, MaxSalary=170000, Remote=Remote.No, Status = JobPostingStatus.Closed, PostedDate = DateTime.Now.AddDays(-50), ApplicationDeadline = DateTime.Now.AddDays(-10) },
                new JobPosting { Title = "Senior React Developer", Employer = employers[2], Location = locations[7], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Senior, MinSalary=100000, MaxSalary=140000, Remote=Remote.Yes, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-12), ApplicationDeadline = DateTime.Now.AddDays(30) },
                new JobPosting { Title = "UI/UX Designer", Employer = employers[2], Location = locations[7], EmploymentType = EmploymentType.Contract, ExperienceLevel = ExperienceLevel.Mid, MinSalary=70000, MaxSalary=90000, Remote=Remote.Hybrid, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-3), ApplicationDeadline = DateTime.Now.AddDays(15) },
                new JobPosting { Title = "Frontend Developer (Vue.js)", Employer = employers[5], Location = locations[4], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=75000, MaxSalary=100000, Remote=Remote.Hybrid, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-20), ApplicationDeadline = DateTime.Now.AddDays(50) },
                new JobPosting { Title = "Junior Frontend Intern", Employer = employers[0], Location = locations[0], EmploymentType = EmploymentType.Internship, ExperienceLevel = ExperienceLevel.EntryLevel, MinSalary=20000, MaxSalary=30000, Remote=Remote.No, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-2), ApplicationDeadline = DateTime.Now.AddDays(10) },
                new JobPosting { Title = "Full-Stack Developer (.NET + React)", Employer = employers[0], Location = locations[1], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=85000, MaxSalary=115000, Remote=Remote.Hybrid, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-18), ApplicationDeadline = DateTime.Now.AddDays(35) },
                new JobPosting { Title = "Software Engineer (Node.js + Vue)", Employer = employers[5], Location = locations[4], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=80000, MaxSalary=110000, Remote=Remote.Yes, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-9), ApplicationDeadline = DateTime.Now.AddDays(22) },
                new JobPosting { Title = "Senior DevOps Engineer (AWS)", Employer = employers[1], Location = locations[6], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Senior, MinSalary=120000, MaxSalary=160000, Remote=Remote.Yes, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-25), ApplicationDeadline = DateTime.Now.AddDays(40) },
                new JobPosting { Title = "CI/CD Specialist (Jenkins/GitLab)", Employer = employers[4], Location = locations[9], EmploymentType = EmploymentType.Contract, ExperienceLevel = ExperienceLevel.Mid, MinSalary=90000, MaxSalary=120000, Remote=Remote.Yes, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-6), ApplicationDeadline = DateTime.Now.AddDays(18) },
                new JobPosting { Title = "Kubernetes Administrator", Employer = employers[1], Location = locations[8], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=95000, MaxSalary=130000, Remote=Remote.Hybrid, Status = JobPostingStatus.Closed, PostedDate = DateTime.Now.AddDays(-60), ApplicationDeadline = DateTime.Now.AddDays(-20) },
                new JobPosting { Title = "Machine Learning Engineer", Employer = employers[3], Location = locations[8], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Senior, MinSalary=125000, MaxSalary=170000, Remote=Remote.Hybrid, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-30), ApplicationDeadline = DateTime.Now.AddDays(60) },
                new JobPosting { Title = "Data Analyst (SQL & Python)", Employer = employers[3], Location = locations[8], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=80000, MaxSalary=105000, Remote=Remote.Hybrid, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-11), ApplicationDeadline = DateTime.Now.AddDays(28) },
                new JobPosting { Title = "Big Data Engineer (Spark/Hadoop)", Employer = employers[3], Location = locations[6], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Lead, MinSalary=140000, MaxSalary=190000, Remote=Remote.Yes, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-14), ApplicationDeadline = DateTime.Now.AddDays(33) },
                new JobPosting { Title = "iOS Developer (SwiftUI)", Employer = employers[2], Location = locations[7], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=90000, MaxSalary=125000, Remote=Remote.Hybrid, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-8), ApplicationDeadline = DateTime.Now.AddDays(26) },
                new JobPosting { Title = "Android Developer (Kotlin)", Employer = employers[2], Location = locations[7], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=90000, MaxSalary=125000, Remote=Remote.Hybrid, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-8), ApplicationDeadline = DateTime.Now.AddDays(26) },
                new JobPosting { Title = "QA Automation Engineer", Employer = employers[4], Location = locations[9], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=70000, MaxSalary=95000, Remote=Remote.No, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-4), ApplicationDeadline = DateTime.Now.AddDays(14) },
                new JobPosting { Title = "Project Manager (Agile/Scrum)", Employer = employers[0], Location = locations[0], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Senior, MinSalary=90000, MaxSalary=120000, Remote=Remote.No, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-22), ApplicationDeadline = DateTime.Now.AddDays(40) },
                new JobPosting { Title = "Expired .NET Role", Employer = employers[0], Location = locations[0], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=80000, MaxSalary=100000, Remote=Remote.Hybrid, Status = JobPostingStatus.Closed, PostedDate = DateTime.Now.AddDays(-40), ApplicationDeadline = DateTime.Now.AddDays(-5) },
                new JobPosting { Title = "Expired Frontend Role", Employer = employers[2], Location = locations[7], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=80000, MaxSalary=100000, Remote=Remote.Yes, Status = JobPostingStatus.Closed, PostedDate = DateTime.Now.AddDays(-50), ApplicationDeadline = DateTime.Now.AddDays(-15) },
                new JobPosting { Title = "Expired DevOps Role", Employer = employers[1], Location = locations[6], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=100000, MaxSalary=130000, Remote=Remote.Yes, Status = JobPostingStatus.Closed, PostedDate = DateTime.Now.AddDays(-45), ApplicationDeadline = DateTime.Now.AddDays(-8) },
                new JobPosting { Title = "Expired Data Role", Employer = employers[3], Location = locations[8], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=90000, MaxSalary=110000, Remote=Remote.Hybrid, Status = JobPostingStatus.Closed, PostedDate = DateTime.Now.AddDays(-35), ApplicationDeadline = DateTime.Now.AddDays(-2) },
                new JobPosting { Title = "Senior .NET Engineer", Employer = employers[0], Location = locations[0], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Senior, MinSalary=100000, MaxSalary=140000, Remote=Remote.Hybrid, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-10), ApplicationDeadline = DateTime.Now.AddDays(30) },
                new JobPosting { Title = "Medior .NET Engineer", Employer = employers[0], Location = locations[0], EmploymentType = EmploymentType.FullTime, ExperienceLevel = ExperienceLevel.Mid, MinSalary=90000, MaxSalary=120000, Remote=Remote.Hybrid, Status = JobPostingStatus.Active, PostedDate = DateTime.Now.AddDays(-10), ApplicationDeadline = DateTime.Now.AddDays(30) },
            };

            foreach (var job in jobPostings)
            {
                job.Description = $"Exciting opportunity for a {job.Title} at {job.Employer.CompanyName}. Join our dynamic team and work on cutting-edge projects in {job.Location.City}.";
                job.Requirements = $"We are looking for a {job.ExperienceLevel} professional with experience in key technologies for this role. Strong communication and teamwork skills are essential.";
                job.Benefits = $"{job.Employer.CompanyName} offers a competitive salary, {job.Employer.Benefits}, and a great work environment.";
            }

            dbContext.JobPostings.AddRange(jobPostings);
            dbContext.SaveChanges();
        }

        private static void SeedJunctionTables(ITapplyDbContext dbContext)
        {
            var skills = dbContext.Skills.ToDictionary(s => s.Name, s => s.Id);

            var jobs = dbContext.JobPostings.ToList();
            var jobSkills = new List<JobPostingSkill>();
            Action<int, string[]> linkJob = (jobId, skillNames) => {
                jobSkills.AddRange(skillNames.Where(skills.ContainsKey).Select(skillName => new JobPostingSkill { JobPostingId = jobId, SkillId = skills[skillName] }));
            };

            linkJob(jobs[0].Id, new[] { "C#", ".NET Core", "SQL", "Azure", "GraphQL" });
            linkJob(jobs[1].Id, new[] { "C#", ".NET Core", "SQL", "Git" });
            linkJob(jobs[2].Id, new[] { ".NET Core", "Azure", "Docker", "Kubernetes", "CI/CD" });
            linkJob(jobs[3].Id, new[] { "Java", "SQL" });
            linkJob(jobs[4].Id, new[] { "C#", ".NET Core", "Project Management" });
            linkJob(jobs[5].Id, new[] { "React", "TypeScript", "JavaScript", "HTML", "CSS" });
            linkJob(jobs[6].Id, new[] { "UI/UX Design", "Figma", "Sketch" });
            linkJob(jobs[7].Id, new[] { "Vue.js", "JavaScript", "HTML", "CSS" });
            linkJob(jobs[8].Id, new[] { "React", "JavaScript", "HTML" });
            linkJob(jobs[9].Id, new[] { ".NET Core", "React", "SQL", "TypeScript" });
            linkJob(jobs[10].Id, new[] { "Node.js", "Vue.js", "MongoDB", "JavaScript" });
            linkJob(jobs[11].Id, new[] { "AWS", "Docker", "Kubernetes", "Terraform", "CI/CD" });
            linkJob(jobs[12].Id, new[] { "Jenkins", "GitLab CI", "CI/CD", "Ansible" });
            linkJob(jobs[13].Id, new[] { "Kubernetes", "Docker" });
            linkJob(jobs[14].Id, new[] { "Machine Learning", "Python", "Deep Learning" });
            linkJob(jobs[15].Id, new[] { "Data Science", "Python", "SQL", "Pandas" });
            linkJob(jobs[16].Id, new[] { "Big Data", "Apache Spark", "Hadoop", "Python" });
            linkJob(jobs[17].Id, new[] { "iOS", "Swift", "Mobile Development" });
            linkJob(jobs[18].Id, new[] { "Android", "Kotlin", "Mobile Development" });
            linkJob(jobs[19].Id, new[] { "Quality Assurance", "Selenium" });
            linkJob(jobs[20].Id, new[] { "Project Management", "Agile", "Scrum" });
            linkJob(jobs[25].Id, new[] { "C#", ".NET Core", "SQL", "Azure" });
            linkJob(jobs[26].Id, new[] { "C#", ".NET Core", "SQL" });
            dbContext.JobPostingSkills.AddRange(jobSkills);

            var candidates = dbContext.Candidates.ToList();
            var candidateSkills = new List<CandidateSkill>();
            Action<int, int, string[]> linkCand = (candidateId, level, skillNames) => {
                candidateSkills.AddRange(skillNames.Where(skills.ContainsKey).Select(skillName => new CandidateSkill { CandidateId = candidateId, SkillId = skills[skillName], Level = level }));
            };

            linkCand(candidates[0].Id, 5, new[] { "C#", ".NET Core", "SQL" }); linkCand(candidates[0].Id, 4, new[] { "Azure", "Docker" });
            linkCand(candidates[1].Id, 5, new[] { "React", "TypeScript", "JavaScript" }); linkCand(candidates[1].Id, 3, new[] { "UI/UX Design", "Node.js" });
            linkCand(candidates[2].Id, 5, new[] { "AWS", "Docker", "Kubernetes" }); linkCand(candidates[2].Id, 4, new[] { "Terraform", "Python" });
            linkCand(candidates[3].Id, 5, new[] { "Python", "Data Science", "Machine Learning" }); linkCand(candidates[3].Id, 4, new[] { "SQL", "Pandas" });
            linkCand(candidates[4].Id, 4, new[] { "C#", ".NET Core", "React", "SQL" }); linkCand(candidates[4].Id, 3, new[] { "Node.js", "Azure" });
            linkCand(candidates[5].Id, 3, new[] { "Java", "SQL", "Git" });
            linkCand(candidates[6].Id, 4, new[] { "iOS", "Swift", "Mobile Development" });
            linkCand(candidates[7].Id, 4, new[] { "Quality Assurance", "Selenium", "Agile" });
            linkCand(candidates[8].Id, 4, new[] { "Python", "SQL" });
            linkCand(candidates[9].Id, 3, new[] { "UI/UX Design", "Figma" });
            dbContext.CandidateSkills.AddRange(candidateSkills);

            var employers = dbContext.Employers.ToList();
            var employerSkills = new List<EmployerSkill>();
            Action<int, string[]> linkEmp = (employerId, skillNames) => {
                employerSkills.AddRange(skillNames.Where(skills.ContainsKey).Select(skillName => new EmployerSkill { EmployerId = employerId, SkillId = skills[skillName] }));
            };

            linkEmp(employers[0].Id, new[] { "C#", ".NET Core", "SQL", "Azure", "Agile" });
            linkEmp(employers[1].Id, new[] { "AWS", "Azure", "GCP", "Docker", "Kubernetes", "DevOps" });
            linkEmp(employers[2].Id, new[] { "React", "TypeScript", "UI/UX Design", "iOS", "Android" });
            linkEmp(employers[3].Id, new[] { "Python", "Data Science", "Machine Learning", "Big Data" });
            dbContext.EmployerSkills.AddRange(employerSkills);

            dbContext.SaveChanges();
        }

        private static void SeedApplications(ITapplyDbContext dbContext)
        {
            var candidates = dbContext.Candidates.ToList();
            var jobs = dbContext.JobPostings.ToList();
            var cvs = dbContext.CVDocuments.ToList();

            Func<string, int> getJobId = (title) => jobs.First(j => j.Title == title).Id;
            var random = new Random();

            var applications = new List<Application>
            {
                new Application { CandidateId = candidates[0].Id, JobPostingId = getJobId("Senior .NET Engineer"), Status = ApplicationStatus.InterviewScheduled, CVDocumentId = cvs.First(c => c.CandidateId == candidates[0].Id).Id, Availability = "Immediately" },
                new Application { CandidateId = candidates[0].Id, JobPostingId = getJobId("Backend Developer (C#)"), Status = ApplicationStatus.Applied, CVDocumentId = cvs.First(c => c.CandidateId == candidates[0].Id).Id, Availability = "Immediately" },
                new Application { CandidateId = candidates[0].Id, JobPostingId = getJobId("Azure Cloud Engineer (.NET)"), Status = ApplicationStatus.InConsideration, CVDocumentId = cvs.First(c => c.CandidateId == candidates[0].Id).Id, Availability = "Immediately" },
                new Application { CandidateId = candidates[0].Id, JobPostingId = getJobId("Expired .NET Role"), Status = ApplicationStatus.Rejected, CVDocumentId = cvs.First(c => c.CandidateId == candidates[0].Id).Id, Availability = "Immediately" },
                new Application { CandidateId = candidates[1].Id, JobPostingId = getJobId("Senior React Developer"), Status = ApplicationStatus.Applied, CVDocumentId = cvs.First(c => c.CandidateId == candidates[1].Id).Id, Availability = "2 weeks notice" },
                new Application { CandidateId = candidates[1].Id, JobPostingId = getJobId("UI/UX Designer"), Status = ApplicationStatus.InConsideration, CVDocumentId = cvs.First(c => c.CandidateId == candidates[1].Id).Id, Availability = "2 weeks notice" },
                new Application { CandidateId = candidates[1].Id, JobPostingId = getJobId("Frontend Developer (Vue.js)"), Status = ApplicationStatus.Applied, CVDocumentId = cvs.First(c => c.CandidateId == candidates[1].Id).Id, Availability = "2 weeks notice" },
                new Application { CandidateId = candidates[1].Id, JobPostingId = getJobId("Full-Stack Developer (.NET + React)"), Status = ApplicationStatus.Rejected, CVDocumentId = cvs.First(c => c.CandidateId == candidates[1].Id).Id, Availability = "2 weeks notice" },
                new Application { CandidateId = candidates[1].Id, JobPostingId = getJobId("Expired Frontend Role"), Status = ApplicationStatus.Rejected, CVDocumentId = cvs.First(c => c.CandidateId == candidates[1].Id).Id, Availability = "2 weeks notice" },
                new Application { CandidateId = candidates[2].Id, JobPostingId = getJobId("Senior DevOps Engineer (AWS)"), Status = ApplicationStatus.Applied, CVDocumentId = cvs.First(c => c.CandidateId == candidates[2].Id).Id, Availability = "1 month notice" },
                new Application { CandidateId = candidates[2].Id, JobPostingId = getJobId("CI/CD Specialist (Jenkins/GitLab)"), Status = ApplicationStatus.Applied, CVDocumentId = cvs.First(c => c.CandidateId == candidates[2].Id).Id, Availability = "1 month notice" },
                new Application { CandidateId = candidates[3].Id, JobPostingId = getJobId("Machine Learning Engineer"), Status = ApplicationStatus.InConsideration, CVDocumentId = cvs.First(c => c.CandidateId == candidates[3].Id).Id, Availability = "Immediately" },
                new Application { CandidateId = candidates[3].Id, JobPostingId = getJobId("Data Analyst (SQL & Python)"), Status = ApplicationStatus.InterviewScheduled, CVDocumentId = cvs.First(c => c.CandidateId == candidates[3].Id).Id, Availability = "Immediately" },
                new Application { CandidateId = candidates[4].Id, JobPostingId = getJobId("Full-Stack Developer (.NET + React)"), Status = ApplicationStatus.Accepted, CVDocumentId = cvs.First(c => c.CandidateId == candidates[4].Id).Id, Availability = "N/A" },
                new Application { CandidateId = candidates[4].Id, JobPostingId = getJobId("Senior .NET Engineer"), Status = ApplicationStatus.Applied, CVDocumentId = cvs.First(c => c.CandidateId == candidates[4].Id).Id, Availability = "N/A" },
                new Application { CandidateId = candidates[5].Id, JobPostingId = getJobId("Junior Java Developer"), Status = ApplicationStatus.Applied, CVDocumentId = cvs.First(c => c.CandidateId == candidates[5].Id).Id, Availability = "Immediately" },
                new Application { CandidateId = candidates[6].Id, JobPostingId = getJobId("iOS Developer (SwiftUI)"), Status = ApplicationStatus.InConsideration, CVDocumentId = cvs.First(c => c.CandidateId == candidates[6].Id).Id, Availability = "3 weeks notice" },
                new Application { CandidateId = candidates[7].Id, JobPostingId = getJobId("QA Automation Engineer"), Status = ApplicationStatus.InterviewScheduled, CVDocumentId = cvs.First(c => c.CandidateId == candidates[7].Id).Id, Availability = "1 week notice" },
                new Application { CandidateId = candidates[8].Id, JobPostingId = getJobId("Backend Developer (C#)"), Status = ApplicationStatus.Applied, CVDocumentId = cvs.First(c => c.CandidateId == candidates[8].Id).Id, Availability = "Immediately" },
                new Application { CandidateId = candidates[9].Id, JobPostingId = getJobId("UI/UX Designer"), Status = ApplicationStatus.Applied, CVDocumentId = cvs.First(c => c.CandidateId == candidates[9].Id).Id, Availability = "Immediately" }
            };

            foreach (var app in applications)
            {
                app.ApplicationDate = DateTime.Now.AddDays(-random.Next(1, 60));
                app.CoverLetter = $"I am writing to express my strong interest in the {jobs.First(j => j.Id == app.JobPostingId).Title} position. My skills and experience are an excellent match for your requirements.";
            }

            dbContext.Applications.AddRange(applications);
            dbContext.SaveChanges();
        }

        private static void SeedRemainingData(ITapplyDbContext dbContext)
        {
            var candidates = dbContext.Candidates.ToList();
            var employers = dbContext.Employers.ToList();

            dbContext.Reviews.AddRange(
                new Review { CandidateId = candidates[0].Id, EmployerId = employers[0].Id, Rating = 5, Comment = "Excellent company, great team.", Position = "Senior .NET Engineer", Relationship = ReviewRelationship.FormerEmployee, ModerationStatus = ModerationStatus.Approved, ReviewDate = DateTime.Now.AddMonths(-6) },
                new Review { CandidateId = candidates[1].Id, EmployerId = employers[2].Id, Rating = 4, Comment = "Very creative environment, but fast-paced.", Position = "Frontend Developer", Relationship = ReviewRelationship.CurrentEmployee, ModerationStatus = ModerationStatus.Approved, ReviewDate = DateTime.Now.AddMonths(-2) },
                new Review { CandidateId = candidates[2].Id, EmployerId = employers[1].Id, Rating = 5, Comment = "Top-notch tech and great learning opportunities.", Position = "DevOps Engineer", Relationship = ReviewRelationship.CurrentEmployee, ModerationStatus = ModerationStatus.Approved, ReviewDate = DateTime.Now.AddMonths(-1) },
                new Review { CandidateId = candidates[4].Id, EmployerId = employers[0].Id, Rating = 4, Comment = "The interview process was very thorough and professional.", Position = "Full-Stack Developer", Relationship = ReviewRelationship.Interviewee, ModerationStatus = ModerationStatus.Approved, ReviewDate = DateTime.Now.AddMonths(-3) },
                new Review { CandidateId = candidates[3].Id, EmployerId = employers[3].Id, Rating = 3, Comment = "Good company, but some projects are less exciting than others.", Position = "Data Scientist", Relationship = ReviewRelationship.CurrentEmployee, ModerationStatus = ModerationStatus.Pending, ReviewDate = DateTime.Now.AddDays(-5) },
                new Review { CandidateId = candidates[0].Id, EmployerId = employers[4].Id, Rating = 2, Comment = "Did not receive feedback after the final interview round.", Position = "Backend Developer", Relationship = ReviewRelationship.Interviewee, ModerationStatus = ModerationStatus.Approved, ReviewDate = DateTime.Now.AddMonths(-4) }
            );

            foreach (var candidate in candidates)
            {
                dbContext.WorkExperiences.Add(new WorkExperience
                {
                    CandidateId = candidate.Id,
                    CompanyName = "Previous Company Inc.",
                    Position = candidate.Title,
                    StartDate = DateTime.Now.AddYears(-(candidate.ExperienceYears)),
                    EndDate = DateTime.Now.AddYears(-1),
                    Description = "Worked on various projects using relevant technologies."
                });
                dbContext.Educations.Add(new Education
                {
                    CandidateId = candidate.Id,
                    Institution = "Faculty of Information Technology",
                    Degree = "Bachelor",
                    FieldOfStudy = "Computer Science",
                    StartDate = DateTime.Now.AddYears(-(candidate.ExperienceYears) - 4),
                    EndDate = DateTime.Now.AddYears(-(candidate.ExperienceYears)),
                    Description = "Graduated with honors."
                });
                dbContext.Preferences.Add(new Preferences
                {
                    CandidateId = candidate.Id,
                    LocationId = candidate.LocationId,
                    Remote = Remote.Hybrid,
                    EmploymentType = EmploymentType.FullTime
                });
            }

            dbContext.SaveChanges();
        }

        private static User CreateUser(string email, string password)
        {
            byte[] salt;
            string userHashedPassword = HashPassword(password, out salt);
            string userSalt = Convert.ToBase64String(salt);

            return new User
            {
                Email = email,
                PasswordHash = userHashedPassword,
                PasswordSalt = userSalt,
                RegistrationDate = DateTime.Now.AddDays(-new Random().Next(30, 365)),
                IsActive = true
            };
        }

        private static string HashPassword(string password, out byte[] salt)
        {
            salt = new byte[16];
            using (var rng = new RNGCryptoServiceProvider())
            {
                rng.GetBytes(salt);
            }

            using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 10000))
            {
                return Convert.ToBase64String(pbkdf2.GetBytes(32));
            }
        }
    }
}