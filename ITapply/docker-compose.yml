networks:
  itapply-network:
    driver: bridge

services:
  # SQL Server Service
  itapply-sql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    hostname: itapply-sql
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SQL_PASSWORD}
      - MSSQL_PID=Developer
    ports:
      - "${SQL_PORT}:1433"
    networks:
      - itapply-network
    restart: unless-stopped

  # API Service
  itapply-api:
    build:
      context: .
      dockerfile: ITapply.WebAPI/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ConnectionStrings__DefaultConnection=Server=${SQL_HOST};Database=${SQL_DATABASE};User=${SQL_USER};Password=${SQL_PASSWORD};TrustServerCertificate=True
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - EasyNetQ_ConnectionString=${EASYNETQ_CONNECTION_STRING}
    depends_on:
      - itapply-sql
    networks:
      - itapply-network
    restart: unless-stopped

  # RabbitMQ Service
  itapply-rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: itapply-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    depends_on:
      - itapply-api
    networks:
      - itapply-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Notifier Service
  itapply-notifier:
    build:
      context: .
      dockerfile: ITapply.Notifier/Dockerfile
    environment:
      - SmtpSettings__Server=${SMTP_SERVER}
      - SmtpSettings__Port=${SMTP_PORT}
      - SmtpSettings__Username=${SMTP_USER}
      - SmtpSettings__Password=${SMTP_PASSWORD}
      - SmtpSettings__FromEmail=${FROM_EMAIL}
      - EasyNetQ_ConnectionString=${EASYNETQ_CONNECTION_STRING}
    depends_on:
      itapply-rabbitmq:
        condition: service_healthy
    networks:
      - itapply-network
    restart: unless-stopped